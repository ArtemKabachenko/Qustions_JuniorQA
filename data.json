[ 
    {
      "title": "Що таке інтернет та як він працює?",
      "content": "Інтернет це глобальна мережа в якій всі пристрої з'єднані між собою та мають свій унікальний ідентифікатор IP, та за допомогою протоколів ці пристрої можуть обмінюватись даними."
    },
    {
      "title": "З чого складається URI?",
      "content": "<ol><li>Протокол передачі даних https://</li><li>subdomain.domain.root_domain</li><li>port (http-80, https-443), але він не показується за замовченням</li><li>path - путь до конкретної сторінки або файлу на сайті</li><li>query param - фільтри, сортування, доп. параметри</li><li>anchor - якір, для переходу до певної частини сторінки</li></ol>"
    },
    {
      "title": "Що таке DNS, IP, domain?",
      "content": "<b>DNS</b>: Система, яка перетворює доменні імена (наприклад, google.com) в IP-адреси. <br><b>IP-адреса</b>: Кожен пристрій має унікальну IP-адресу, яка слугує ідентифікатором у мережі"
    },
    {
        "title":
            "Що таке клієнт-серверна архітектура?",
        "content": 
            "Клієнт-серверна архітектура - це спосіб організації взаємодії між пристроями, де клієнт запитує дані або послуги, а сервер їх надає. <br>Існують однорангові та багаторангові архітектури <br><b>однорангові</b> - клієнт - клієнт <br><b>багаторангові</b> - клієнт - сервер - БД <br>На сервері зберігається код додатка, та виконується логіка <br>А в Базі Даних зберігається самі дані, та там ми можемо швидко шукати їх."
    },
    {
      "title":
          "Що може виступати в ролі клієнта?",
      "content": 
          "В ролі клієнта виступає - <b>браузер</b>, <b>мобільний додаток</b>, або <b>десктоп додаток</b>"
    },
    {
      "title":
          "Які браузери ви знаєте? У чому їх відмінність?",
      "content": 
          "<b>Google Chrome</b> — швидкий, простий у використанні, інтегрований із сервісами Google, але споживає багато пам’яті. </br><b>Mozilla Firefox</b> — безпечний, налаштовуваний, підтримує конфіденційність, але трохи повільніший за Chrome. </br><b>Microsoft Edge</b> — швидкий, інтегрований із Windows, енергоефективний, має функції для роботи з PDF. </br><b>Safari</b> — оптимізований для пристроїв Apple, енергоефективний і швидкий, але доступний лише на macOS та iOS. </br><b>Opera</b> — має вбудований VPN, блокувальник реклами та компактний дизайн, але менш популярний. </br><b>Tor Browser</b> — забезпечує анонімність і доступ до мережі Tor, але повільніший через захист даних."
    },
    {
      "title":
          "Що таке OSI model?",
      "content": 
          "Open Systems Interconnection model - модель зв'язки мережевих протоколів. <br>За допомогою цієї моделі різні пристрої можуть взаємодіяти один з одним.</br>Є <b>сім рівнів</b> в цій моделі:</br>1) <b>Фізичний рівень</b> (Physical layer):<br>Відповідає за передачу сигналів через фізичне середовище (дроти, оптоволокно, радіохвилі).<br>Приклад: кабелі Ethernet, Wi-Fi.<br>2) <b>Канальний</b> рівень (Data Link layer):<br>Забезпечує передачу даних між пристроями в межах однієї мережі та виправляє помилки.<br>Приклад: MAC-адреса, протоколи Ethernet.<br>3) <b>Мережевий рівень</b> (Network layer):<br>Відповідає за маршрутизацію даних між різними мережами.<br>Приклад: IP-адреса, протокол IP (IPv4, IPv6).<br>4) <b>Транспортний рівень</b> (Transport layer):<br>Забезпечує надійність передачі даних, контроль цілісності та їх послідовність.<br>Приклад: TCP (надійний) та UDP (швидкий).<br>5) <b>Сеансовий рівень</b> (Session layer):<br>Керує встановленням, підтримкою та завершенням сеансів зв'язку між пристроями.<br>Приклад: протокол NetBIOS.<br>6) <b>Рівень представлення</b> (Presentation layer):<br>Перетворює дані у формат, зрозумілий додаткам, і шифрує/розшифровує їх.<br>Приклад: SSL/TLS, кодування ASCII.<br>7) <b>Прикладний рівень</b> (Application layer):<br>Забезпечує доступ користувачам до мережевих сервісів і програм.<br>Приклад: HTTP, FTP, SMTP (електронна пошта)."
    },
    {
      "title":
          "Які протоколи передачі даних ви знаєте?",
      "content": 
          "Найпопулярніші протоколи з якими працюють програмісти:<br><br><b>Транспортний рівень</b>:<br><b>TCP</b> - це протокол який встановлює handshake, надає надійність передачі даних<br><b>UDP</b> - цей протокол не має handshake, але гарантує швидкість передачі даних<br><b>QUIC</b> - надбудова над протоколом UDP який, і надійний, і гарантує швидкість передачі даних<br><br><b>Прикладний рівень</b>:<br><b>HTTP</b> (HyperText Transfer Protocol) — це протокол передачі гіпертексту, який використовується для обміну даними між веб-браузером (клієнтом) і веб-сервером.<br><b>FTP</b> (File Transfer Protocol) — це протокол для передачі файлів між комп'ютерами в мережі. Він дозволяє завантажувати файли з сервера на клієнт і завантажувати файли з клієнта на сервер. FTP не забезпечує шифрування, що робить його незахищеним"
    },
    {
      "title":
          "Що таке REST API, SOAP? У чому різниця?",
      "content": 
          "<b>REST API</b> (Representational State Transfer) — це архітектурний стиль для створення API, що використовує HTTP для запитів (GET, POST, PUT, DELETE) і працює з ресурсами (URL).<br>Легкий, простий у використанні, масштабований.<br><br><b>SOAP</b> (Simple Object Access Protocol) — це протокол обміну повідомленнями, який використовує XML для передачі даних і суворі стандарти для обробки запитів.<br>Більш складний, забезпечує високий рівень безпеки та транзакцій.<br><br><b>Різниця</b>: REST простіший, швидший і легший у налаштуванні, тоді як SOAP підходить для складних і захищених систем із чіткими стандартами."
    },
    {
      "title":
          "Різниця між TCP та UDP + QUIC",
      "content": 
          "<b>TCP</b> - надійність, упорядкованість, важкий<br><b>UDP</b> - ненадійність, неупорядкованість, легкий<br><b>QUIC</b>- надійність, упорядкованість, легкий"
    },
    {
      "title":
          "Чим відрізняється HTTP від HTTPS?",
      "content": 
          "HTTPS = HTTP + TCP + TLS (S = Secure)<br>HTTPS - надає надійність передачі даних у зв'язку з протоколом TLS."
    },
    {
      "title":
          "Які HTTP-методи ви знаєте?",
      "content": 
          "GET, POST, PUT, PATCH, DELETE, OPTIONS, TRACE, CONNECT, HEAD<br><br><b>GET</b>: Отримати ресурс.<br><b>POST</b>: Надіслати дані на сервер (наприклад, при заповненні форми).<br><b>PUT</b>: Повністю оновити ресурс.<br><b>PATCH</b>: Часткове оновлення ресурсу.<br><b>DELETE</b>: Видалити ресурс.<br><b>OPTIONS</b>: Запит на отримання доступних методів для ресурсу або сервера, працює як ping.<br><b>TRACE</b>: Використовується для діагностики, повертає те саме, що було надіслано в запиті.<br><b>CONNECT</b>: Використовується для створення тунелю (зазвичай для HTTPS-з'єднань через проксі).<br><b>HEAD</b>: Запит на отримання тільки заголовків відповіді без тіла, корисний для перевірки метаданих."
    },
    {
      "title":
          "З чого складається HTTP запит?",
      "content": 
          "1) Метод<br>2) URL<br>3) Заголовки (Headers)<br>4) Тіло запиту (Body)"
    },
    {
      "title":
          "Які приклади HTTP headers ви знаєте?",
      "content": 
          "<b>Заголовки запиту (Request Headers)</b>:<br><br><b>User-Agent</b> — інформує сервер про тип клієнта (браузер або програму), що здійснює запит.<br>Приклад: User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36<br><b>Accept</b> — визначає типи медіа, які клієнт готовий приймати від сервера.<br>Приклад: Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<br><b>Authorization</b> — містить облікові дані для авторизації на сервері.<br>Приклад: Authorization: Bearer <token><br><b>Content-Type</b> — вказує формат тіла запиту, наприклад, при надсиланні форм або даних.<br>Приклад: Content-Type: application/json<br><b>Accept-Language</b> — вказує переваги щодо мов, які клієнт може приймати.<br>Приклад: Accept-Language: en-US,en;q=0.9,uk;q=0.8<br><b>Cookie</b> — передає збережені cookies від клієнта до сервера.<br>Приклад: Cookie: sessionId=abc123; user=JohnDoe<br><br><b>Заголовки відповіді (Response Headers)</b>:<br><br><b>Content-Type</b> — визначає тип вмісту відповіді.<br>Приклад: Content-Type: application/json; charset=UTF-8<br><b>Cache-Control</b> — вказує, як і де можна кешувати відповідь.<br>Приклад: Cache-Control: no-cache, no-store, must-revalidate<br><b>Location</b> — використовується для перенаправлення (редиректу) на іншу URL-адресу.<br>Приклад: Location: https://example.com/new-page<br><b>Set-Cookie</b> — відправляє cookies на клієнт.<br>Приклад: Set-Cookie: sessionId=abc123; Path=/; Secure; HttpOnly<br><b>Content-Length</b> — вказує довжину тіла відповіді в байтах.<br>Приклад: Content-Length: 348<br><b>Server</b> — надає інформацію про сервер, що обробив запит.<br>Приклад: Server: Apache/2.4.1 (Unix)"
    },
    {
      "title":
          "Чи є у HTTP пріоритет запитів?",
      "content": 
          "Так є, у http 2 та http 3. Вирішує браузер які запити надсилати першими"
    },
    {
      "title":
          "Хто вирішує яку версію протоколу використовувати?",
      "content": 
          "Браузер та сервер, домовляються яку версію вони підтримують. Ця домовленість відбувається в handshake"
    },
    {
      "title":
          "Чим відрізняється GET від POST?",
      "content": 
          "<b>GET</b>: <br>- Використовується для отримання інформації з сервера. <br>- Дані передаються через URL в рядку запиту<br>- Максимальна довжина запиту 2048 символів<br><br><b>POST</b>: <br>- Використовується для надсилання даних на сервер (наприклад, при заповненні форм). Зазвичай змінює стан сервера (створює або оновлює ресурси).<br>- Дані передаються в тілі запиту (body)<br>- Немає обмежень на кількість"
    },
    {
      "title":
          "Чи існує у GET метода Request body?",
      "content": 
          "Він існує, але його не заведено надсилати"
    },
    {
      "title":
          "Чим відрізняється PUT від PATCH?",
      "content": 
          "<b>PUT</b>: Оновлює або замінює існуючий ресурс повністю, не вказані поля будуть замінені значеннями за замовчуванням або видалені. Якщо ресурс не існує, зазвичай створюється новий.<br><br><b>PATCH</b>: Оновлює лише частину ресурсу, лише ті дані, які вказані в запиті. Інші частини ресурсу залишаються без змін."
    },
    {
      "title":
          "Охарактеризуйте кожен клас статус-кодів (1xx, 2xx, 3xx, 4xx, 5xx)",
      "content": 
          ""
    },
    {
      "title":
          "Яка різниця між 401 та 403 кодом?",
      "content": 
          ""
    },
    {
      "title":
          "Може сервер надіслати код 400, якщо проблема на його боці?",
      "content": 
          "Ні, для помилок, які виникають через проблеми на сервері, використовуються 5xx статус-коди"
    },
    {
      "title":
          "Що таке XML і JSON, які відмінності між ними?",
      "content": 
          ""
    },
    {
      "title":
          "Які типи даних підтримує JSON?",
      "content": 
          ""
    },
    {
      "title":
          "Яке максимальне число можна помістити в JSON?",
      "content": 
          "Проблеми починаються з занадто великими числами рекомендується не більше 2⁵³-1"
    },
    {
      "title":
          "Що таке cache? Види cache? Що зберігає?",
      "content": 
          ""
    },
    {
      "title":
          "Який Http header відповідає скільки часу зберігати cache?",
      "content": 
          ""
    },
    {
      "title":
          "Що таке Cookie? Що зберігає? Навіщо потрібні?",
      "content": 
          ""
    },
    {
      "title":
          "Як зробити, щоб JS код на клієнті не зміг прочитати Cookie?",
      "content": 
          "Використовувати атрибут httpOnly"
    },
    {
      "title":
          "Як зробити, щоб Cookie передавались тільки по HTTPS?",
      "content": 
          "Використовувати атрибут secure"
    },
    {
      "title":
          "Що таке Local storage? Що зберігає?",
      "content": 
          ""
    },
    {
      "title":
          "Що таке ідентифікація, аутентифікація, авторизація?",
      "content": 
          "<b>Ідентифікація</b> - відповідає на питання Хто це?<br><b>Аутентифікація</b> - Докажи що це ти<br><b>Авторизація</b> - Який доступ до системи ти маєш"
    },
    {
      "title":
          "Навіщо потрібні інструменти розробника в браузері (Chrome DevTools) і як вони допомагають у тестуванні?",
      "content": 
          ""
    },
    {
      "title":
          "Навіщо очищати кеш?",
      "content": 
          ""
    },
    {
      "title":
          "Які види тестування можна застосувати лише до Web?",
      "content": 
          ""
    },
    {
      "title":
          "Які методи взаємодії з API існують? У чому різниця між ними?",
      "content": 
          ""
    },
    {
      "title":
          "Як можна протестувати API, що там потрібно перевіряти?",
      "content": 
          ""
    },
    {
      "title":
          "Що таке HTML/CSS/JavaScript?",
      "content": 
          ""
    },
    {
      "title":
          "Різниця між margin та padding?",
      "content": 
          ""
    },
    {
      "title":
          "Яку структуру має вебсторінка?",
      "content": 
          ""
    },
    {
      "title":
          "Які Web elements ви знаєте?",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    },
    {
      "title":
          "",
      "content": 
          ""
    }
  ]